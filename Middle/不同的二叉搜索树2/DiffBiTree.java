package Middle.不同的二叉搜索树2;import java.util.LinkedList;import java.util.List;public class DiffBiTree {    public List<TreeNode> generateTrees(int n) {        if (n == 0) {            return new LinkedList<>();        }        return generateTrees(1, n);    }    public List<TreeNode> generateTrees(int start, int end) {        List<TreeNode> all = new LinkedList<>();        // 找到了叶子节点的下一层        if (start > end) {            all.add(null);            return all;        }        // 枚举所有可行节点        for (int i = start; i <= end; i++) {            // 获得所有可行左子树            List<TreeNode> leftTrees = generateTrees(start, i - 1);            // 获得所有可行右子树            List<TreeNode> rightTrees = generateTrees(i + 1, end);            // 从左右子树中任意选择一棵树拼接到主树中            for (TreeNode left : leftTrees) {                for (TreeNode right : rightTrees) {                    // 当前节点                    // 在这里获取节点信息，并实现拼接                    TreeNode cur = new TreeNode(i);                    cur.left = left;                    cur.right = right;                    all.add(cur);                }            }        }        return all;    }}class TreeNode{    int val;    TreeNode left, right;    public TreeNode() {}    public TreeNode(int val) {        this.val = val;    }    public TreeNode(int val, TreeNode left, TreeNode right) {        this.val = val;        this.left = left;        this.right = right;    }}
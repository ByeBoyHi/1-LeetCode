package Middle.第N位数字;public class NthDigit {    public static void main(String[] args) {        System.out.println(new NthDigit().findNthDigit(                3        ));    }    // 对于x位数的范围是 10^(x-1) 到 10^x-1，共有 9*10^(x-1) 个数字。    // x=9的时候， x*9*10^(x-1)>2^31-1，因此第n位数字所在整数最多是9位数。    public int findNthDigit(int n) {        int low = 1, high = 9;        while (low < high) {            int mid = ((high - low) >> 1) + low;            if (totalDigits(mid) < n) {                low = mid + 1;            } else {                high = mid;            }        }        int prevDigits = totalDigits(low-1); // 取了前 low-1位数的数字个数和        int index = n - prevDigits - 1; // 减去前面的low-1位及之前位的个数，剩下的就是 low位数字的个数        int start = (int) Math.pow(10, low-1);  // 假如9位数，这里取了8位的10次幂，就是九位        // 因为进入了9位数区域，那么剩下的位数除以9就是经过了多少个九位数        // +start表示这个数字的最终值，比如进入了9位数区域，就先加上100000000，然后对剩下的数字除以9        // 得到其他位数的信息        int num = start + index / low;        // 对9取余表示最后一个九位数的第几个位置        int digitIndex = index % low;        // 右边的第 low-(index%low)-1 位即为无限整数序列的第n位数字        return (num / (int) (Math.pow(10, low - digitIndex - 1))) % 10;    }    public int totalDigits(int length) {        int digits = 0;        int curLength = 1, curCount = 9;        while (curLength <= length) {            digits += curLength * curCount;            curLength++;            curCount *= 10;        }        return digits;    }    // 更加易懂的解法    /*        整个过程都是假设的下标从0开始算起        一位数的时候，每一位是1        两位数的时候，每一位是2        ...        x位数的时候，每一位是x        对于每一位数，我们都加一下当前位所在的总和，然后用n去减        当n小于当前位的总和的时候，说明就在这个范围     */    public int findNthDigit2(int n) {        int d = 1, count = 9;        while (n > (long) d * count) {            n -= d * count;            d++;            count *= 10;        }        int index = n - 1;        int start = (int) Math.pow(10, d - 1);        int num = start + index / d;        int digitIndex = index % d;        /*            因为最后确定第n个数字在digitIndex这个位置            我们可以把digitIndex的所有10次幂都去掉，也就是除法            然后去个位的数字，也就是取余         */        return (num / (int)(Math.pow(10, d - digitIndex - 1))) % 10;    }}
package Middle.统计按位或能得到最大值的子集数目;public class MaxSubSetsNumber {    /*        找到所有可能的按位或得到的最大值        并且记录能成为这些最大值的组合个数，返回个数     */    int preMax = -1;    int ans = 0;    int[] nums;    public int countMaxOrSubsets(int[] nums) {        if (nums.length==1) return 1;        this.nums = nums;        process(0, 0);        return ans;    }    /*        1. 遍历的数组        2. 计算到第i个值了        3. 之前的值     */    public void process(int i, int pre){        if (i==nums.length) {  // 一直到最后一个才进行记录取值，可以避免中间值出现的重复序列            if (preMax < pre) {                preMax = pre;                ans = 1;            } else if (preMax == pre) {                ans++;            }            return;        }        // 选上当前数字        // 最开始pre初始值是0，0和任意数字或运算都是自己        process(i+1, pre|nums[i]);        // 不选当前数字        process(i+1, pre);    }    public static void main(String[] args) {        int[] nums = new int[]{2,2,2};        System.out.println(new MaxSubSetsNumber().countMaxOrSubsets(nums));//        System.out.println(5^7|5);  // 上下等价//        System.out.println(7|5^5);    }}
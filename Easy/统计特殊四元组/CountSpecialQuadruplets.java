package Easy.统计特殊四元组;import java.util.Arrays;import java.util.HashMap;import java.util.Map;public class CountSpecialQuadruplets {    // 暴力破解：O(n^4)    public int countQuadruplets(int[] nums) {        if(nums.length<4){            return 0;        }        int ans = 0;        for (int i=0; i<nums.length; i++){            for (int j=i+1; j<nums.length; j++){                for (int k=j+1; k<nums.length; k++){                    for (int m=k+1; m<nums.length; m++){                        if (nums[m]==nums[i]+nums[j]+nums[k]){                            ans++;                        }                    }                }            }        }        return ans;    }    // 哈希存值优化：O(n^3)    // a b c d --> d>c的    public int countQuadruplets2(int[] nums){        if (nums.length<4) return 0;        int ans = 0;        int n = nums.length;        Map<Integer, Integer> map = new HashMap<>();        for (int c=n-2; c>=2; c--){            map.put(nums[c+1], map.getOrDefault(nums[c+1],0)+1);            for (int a=0; a<c; a++){                for (int b=a+1; b<c; b++){                    int cur = nums[a]+nums[b]+nums[c];                    if (map.containsKey(cur)){                        ans+=map.get(cur);                    }                }            }        }        return ans;    }    // 哈希再优化：O(n^2)    // a+b = d-c    // c=b+1，从后往前，所有的d都减b+1    public int countQuadruplets3(int[] nums){        if (nums.length<4) return 0;        int ans = 0;        int n = nums.length;        Map<Integer, Integer> map = new HashMap<>();        for (int b=n-3; b>=0; b--){            for (int d=b+2; d<n; d++){                int cur =nums[d]-nums[b+1];                map.put(cur, map.getOrDefault(cur, 0)+1);            }            for (int a=0; a<b; a++){                int cur = nums[a]+nums[b];                if (map.containsKey(cur)){                    ans+=map.get(cur);                }            }        }        return ans;    }    // 大佬优化    public int countQuadruplets4(int[] nums) {        if (nums.length<4) return 0;        int n = nums.length;        int ans = 0;        int[] dp1 = new int[101];  // 记录a        int[] dp2 = new int[101];  // 记录a+b        int[] dp3 = new int[101];  // 记录a+b+c        for (int i=0; i<n; i++){            int x = nums[i];            if (i>=3) ans+=dp3[x];  // 这里是直接看是否有a+b+c的值            if (i>=2){                // 这里是 a+b+c                for (int j=1; j<=100-x; j++){                    dp3[j+x] += dp2[j];  // 这里是a+b的个数                }            }            if (i>=1){                // 数字范围是1~100                for (int j=1; j<=100-x; j++){                    dp2[j+x] += dp1[j];  // 这里是a+b的个数                }            }            dp1[x]++;  // 记录一个a的个数        }        return ans;    }}
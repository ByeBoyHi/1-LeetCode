package Middle.字符串转换整数_atoi;import javax.sql.rowset.BaseRowSet;public class Solution {    public static void main(String[] args) {        System.out.println(new Solution().myAtoi("    -42"));    }    public int myAtoi(String s) {        if(s.length()==0){            return 0;        }        StringBuilder ans = new StringBuilder();        int i=0;        // 过滤前导空格        while(i<s.length() && s.charAt(i)==' ')            i++;        if(i<s.length() && s.charAt(i)=='+'){            //如果空格之后是一个加号，并且加号后面是数字，我们略过他            if(i+1<s.length() && s.charAt(i+1)>='0' && s.charAt(i+1)<='9'){                i++;            }else{ // 否则我们返回 0，防止加号后面跟一个减号，然后返回了一个正确的负数                return 0;            }        }        while(i<s.length() && ((s.charAt(i)>='0' && s.charAt(i)<='9') || s.charAt(i)=='-')){            if(s.charAt(i)=='-'){                if(ans.length()==0){  // 遇到第一个符号                    if(i-1>=0 && s.charAt(i-1)=='0'){  // 如果这个符号前面已经遇到很多0了，那么直接返回0                        return 0;                    }                    // 否则加进去                    ans.append("-");                    i++;                    continue;                }else{  // 如果是半路的符号，就break了                    break;                }            }            // 去掉前导零            if(s.charAt(i)=='0' && (ans.length()==0 || (ans.length()==1 && ans.toString().equals("-")))){                i++;                continue;            }            ans.append(s.charAt(i));            i++;        }        // 过滤完前导空格后如果后面不是数字或者符号，而是其他字符，那么ans的长度为0，直接返回0        if(ans.length()==0 || (ans.length()==1 && ans.toString().equals("-")))            return 0;        return parseInt(ans.toString());    }    public int parseInt(String s){        int flag = 1;        int i=0;        if (s.charAt(0)=='-'){            flag = -1;            i++;        }        long res = 0;        for( ; i<s.length(); i++){            res = res*10+(s.charAt(i)-'0');            if (res>Integer.MAX_VALUE){                break;            }        }        if (res>Integer.MAX_VALUE) {            if (flag == 1) {                return Integer.MAX_VALUE;            } else {                return Integer.MIN_VALUE;            }        }        return flag*(int) res;    }}
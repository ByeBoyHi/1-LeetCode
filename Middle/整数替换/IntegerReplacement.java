package Middle.整数替换;import java.util.HashMap;public class IntegerReplacement {    public static void main(String[] args) {        System.out.println(new IntegerReplacement().integerReplacement(2147483647));    }    /**     * 题目难点在于如果是奇数，可以用 n-1 和 n+1 替换，但是每一次的替换结果都会不一样，需要找到最优替换方案     */    // 递归：会从左右递归树各计算出一个结果，然后取最小值    public int integerReplacement(int n) {        if (n==1){            return 0;        }        if ((n&1)==0){            return 1 + integerReplacement(n/2);        }        // 奇数的时候，可以n+1或者n-1        // 并且下一次必然是偶数，必须n/2，那么可以合并为一步        // n = (n+1)/2 或者 n = (n-1)/2        // 但是当 n=2^31-1的时候，n+1会越界        // 所以可以取 n=n/2+1 以及 n = n/2，上下结果是一样的        // 这里我们是两步一起走的，所以+2        return 2 + Math.min(integerReplacement(n/2), integerReplacement(n/2+1));    }    // DP：显然上面的递归树计算了很多重复值，那么我们可以用集合进行记录，避免重复计算    // 键值对：前面是对应的数字，后面是对应的值    HashMap<Integer, Integer> map = new HashMap<>();    public int integerReplacementDP(int n) {        if (n==1){            return 0;        }        if (!map.containsKey(n)){            if ((n&1)==0){                map.put(n, 1+integerReplacement(n/2));            }else {                map.put(n, 2+Math.min(integerReplacement(n/2), integerReplacement(n/2+1)));            }        }        return map.get(n);    }    // 贪心算法    public int integerReplacementTX(int n) {        int ans = 0;        while (n!=1){            if ((n&1)==0){                n >>=1;            }else {                if (n!=3 && ((n>>1)&1)==1)  n++;  // 如果+1可以消除两位以上的话                else n--;            }            ans++;        }        return ans;    }    public int integerReplacementTX2(int n) {        int ans = 0;        while (n != 1) {            if (n % 2 == 0) {                ++ans;                n /= 2;            } else if (n % 4 == 1) {                ans += 2;                n /= 2;            } else {                if (n == 3) {                    ans += 2;                    n = 1;                } else {                    ans += 2;                    n = n / 2 + 1;                }            }        }        return ans;    }}